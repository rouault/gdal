# build GDAL library and to run test with CMake

name: Build and test with CMake

on:
    push:
        paths-ignore:
            - 'doc/**'
        branches-ignore:
            - 'backport**'
    pull_request:
        paths-ignore:
            - 'doc/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CMAKE_UNITY_BUILD: OFF

permissions:
  contents: read  #  to fetch code (actions/checkout)

jobs:

  build-mac:
    runs-on: macOS-latest
    env:
      # Disable Arrow/Parquet because the VM provides libraries in /usr/local/lib/
      # that cause Illegal instruction error when running tests. I suspect the
      # Arrow/Parquet libraries to be built with AVX2 support but the VM worker
      # doesn't support it.
      CMAKE_OPTIONS: -DCFITSIO_ROOT=/usr/local/opt/cfitsio  -DPoppler_ROOT=/usr/local/opt/poppler -DPROJ_ROOT=/usr/local/opt/proj -DSPATIALITE_ROOT=/usr/local/opt/libspatialite -DPostgreSQL_ROOT=/usr/local/opt/libpq -DEXPAT_ROOT=/usr/local/opt/expat -DXercesC_ROOT=/usr/local/opt/xerces-c -DSQLite3_ROOT=/usr/local/opt/sqlite -DOpenSSL_ROOT=/usr/local/opt/openssl -DPNG_ROOT=/usr/local/opt/libpng -DJPEG_ROOT=/usr/local/opt/jpeg-turbo -DEXPECTED_JPEG_LIB_VERSION=80 -DOpenJPEG_ROOT=/usr/local/opt/openjpeg -DCURL_ROOT=/usr/local/opt/curl -DGDAL_USE_ARROW=OFF -DGDAL_USE_PARQUET=OFF
      cache-name: cmake-macos
    steps:
    - name: Setup xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.4
    - name: Checkout GDAL
      uses: actions/checkout@v3
    - name: Setup cache
      uses: actions/cache@v3
      id: cache
      with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}
            ${{ runner.os }}-${{ env.cache-name }}
    - run: |
        cmake --version
    - name: Install dependency
      run: |
        brew update
        brew outdated
        brew unlink python
        brew install --overwrite python@3.10 python@3.11
        brew install postgresql || brew link postgresql
        brew install pkg-config freexl libxml2 libspatialite geos proj libgeotiff openjpeg giflib libaec postgis poppler doxygen unixodbc jpeg-turbo aom jpeg-xl libheif
        brew install ccache swig
        # gdal is automatically installed as a dependency for postgis
        brew uninstall --ignore-dependencies gdal
        cd /usr/local/opt/proj/share/proj
        curl http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz > proj-datumgrid-1.8.tar.gz
        tar xvzf proj-datumgrid-1.8.tar.gz
        cd $OLDPWD
    - name: Configure ccache
      run: |
          echo CCACHE_BASEDIR=$PWD >> ${GITHUB_ENV}
          echo CCACHE_DIR=$PWD/.ccache >> ${GITHUB_ENV}
          echo CCACHE_MAXSIZE=250M >> ${GITHUB_ENV}
          ccache -z
      working-directory: ${{ github.workspace }}
    - name: Configure
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        export PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig
        cmake -Werror=dev -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal ${CMAKE_OPTIONS} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror -DUSE_CCACHE=ON -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build" -DWERROR_DEV_FLAG="-Werror=dev"
        $(cat $GITHUB_WORKSPACE/build/python_executable.txt) -m pip install --user -r $GITHUB_WORKSPACE/autotest/requirements.txt
    - name: Build
      run: |
        cmake --build $GITHUB_WORKSPACE/build -j 3
        otool -L $GITHUB_WORKSPACE/build/libgdal.dylib
    - name: test
      run: cmake --build $GITHUB_WORKSPACE/build --target quicktest
    - name: test (with ctest)
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/build -V -j 3
      env:
        BUILD_NAME: "MacOS build"
    - name: Install
      run: cmake --build $GITHUB_WORKSPACE/build --target install -j 3
    - name: Test post-install usage (with pkg-config)
      run: |
        ./autotest/postinstall/test_pkg-config.sh $GITHUB_WORKSPACE/install-gdal
    - name: Test post-install usage (with gdal-config)
      run: |
        ./autotest/postinstall/test_gdal-config.sh $GITHUB_WORKSPACE/install-gdal
    - name: Test post-install usage (with CMake)
      run: |
        ./autotest/postinstall/test_cmake.sh $GITHUB_WORKSPACE/install-gdal
    - name: ccache statistics
      run: ccache -s
