# build GDAL library and to run test with CMake

name: Build and test with CMake

on:
    push:
        paths-ignore:
            - 'doc/**'
    pull_request:
        paths-ignore:
            - 'doc/**'

env:
  CMAKE_UNITY_BUILD: OFF

jobs:

  build-windows-conda:
    runs-on: windows-2022
    env:
        architecture: x64
        generator: Ninja
        cache-name: cmake-msvc
    steps:
    # To avoid git clone to mess with the line endings of GDAL autotest data
    # files that look like text, but should be handled as binary content
    - name: Set git core.autocrlf to false
      run: |
        git config --global core.autocrlf false
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - name: populate JAVA_HOME
      shell: pwsh
      run: |
        echo "JAVA_HOME=$env:JAVA_HOME_11_X64" >> %GITHUB_ENV%
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: gdalenv
        python-version: 3.9
        channels: conda-forge
    - run: |
        cmake --version
    - name: Install dependency
      shell: bash -l {0}
      run: |
        conda install --yes --quiet --name gdalenv zlib clcache
        conda install --yes --quiet --name gdalenv -c conda-forge proj
    - name: Setup cache
      uses: actions/cache@v2
      id: cache
      with:
          path: ${{ github.workspace }}\.clcache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}
            ${{ runner.os }}-${{ env.cache-name }}
    - name: Configure ccache (Part 1)
      shell: cmd
      run: |
          set CLCACHE_DIR=%CD%\.clcache
          echo CLCACHE_DIR=%CLCACHE_DIR%>> %GITHUB_ENV%
    - name: Configure ccache (Part 2)
      shell: bash -l {0}
      run: |
          ${CONDA_PREFIX}/Scripts/clcache -z
          ${CONDA_PREFIX}/Scripts/clcache -M 250000000
          ${CONDA_PREFIX}/Scripts/clcache -s
          # Otherwise cmake can find link.exe from Conda instead of MSVC
          rm /usr/bin/link
      working-directory: ${{ github.workspace }}
    - name: Configure
      shell: bash -l {0}
      # FIXME: Jasper manually disabled because of linking errors: lacks jp2_box_destroy
      # Disable MySQL because of "error LNK2038: mismatch detected for '_MSC_VER': value '1800' doesn't match value '1900' in ogrmysqldatasource.obj" and other errors
      # Disable LIBKML because of issue at linking time with kmlXXXX.lib being debug libraries
      # Note that the leading space in CMAKE_C/CXX_FLAGS=" /WX" is due to using Bash on Windows that would
      # otherwise interpret /bla has a file relative to the Bash root directory and would replace it by a path like c:\Program Files\git\WX
      # BUILD_JAVA_BINDINGS=OFF because we get "Error occurred during initialization of VM.   Corrupted ZIP library: C:\Miniconda\envs\gdalenv\Library\bin\zip.dll" when running java. Not reproducible on a standard VM
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        cmake -G "${generator}" -Werror=dev "-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal" "-DUSE_CCACHE=ON" "-DCMAKE_PREFIX_PATH=${CONDA_PREFIX}" -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build" -DJASPER_LIBRARY_RELEASE:FILEPATH= -DLIBKML_BASE_LIBRARY:FILEPATH= -DGDAL_ENABLE_PLUGINS:BOOL=ON -DGDAL_ENABLE_PLUGINS_NO_DEPS:BOOL=ON -DGDAL_USE_PUBLICDECOMPWT:BOOL=ON -DPUBLICDECOMPWT_URL=https://github.com/rouault/PublicDecompWT -DBUILD_JAVA_BINDINGS=OFF -DBUILD_CSHARP_BINDINGS=OFF -DGDAL_USE_MYSQL:BOOL=OFF -DCMAKE_C_FLAGS=" /WX" -DCMAKE_CXX_FLAGS=" /WX" -DWERROR_DEV_FLAG="-Werror=dev" -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF -DOGR_BUILD_OPTIONAL_DRIVERS=OFF -DGDAL_USE_EXTERNAL_LIBS=OFF -DCMAKE_BUILD_TYPE=Release
    - name: Build
      shell: bash -l {0}
      run: cmake --build $GITHUB_WORKSPACE/build --config Release -j 2
      env:
        GIT_LFS_SKIP_SMUDGE: 1 # for PublicDecompWT github repository clone
    - name: Install
      shell: bash -l {0}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --target install
        export PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH
        gdalinfo --version
    - name: clcache statistics
      shell: bash -l {0}
      run:
        ${CONDA_PREFIX}/Scripts/clcache -s
